{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "daff11cd-3ed1-4367-9e3d-8dd4e6ec09c1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the stock ticker:  WMT\n",
      "Enter the number of years for dividend forecast:  5\n",
      "Enter the dividend for year 1:  0.83\n",
      "Enter the dividend for year 2:  0.94\n",
      "Enter the dividend for year 3:  1.08\n",
      "Enter the dividend for year 4:  1.18\n",
      "Enter the dividend for year 5:  1.23\n",
      "Enter the terminal growth rate (as a decimal):  0.03\n",
      "Enter the discount rate (as a decimal):  0.048\n",
      "Enter the current market price:  67.50\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The intrinsic value of WMT is: $60.21\n",
      "Recommendation: Sell\n"
     ]
    }
   ],
   "source": [
    "# Defining function for calculating intrinsic value\n",
    "def calculate_intrinsic_value(dividends, terminal_growth_rate, discount_rate):\n",
    "    present_value_dividends = 0\n",
    "    for t in range(len(dividends)): # For loop to traverse through every dividend and calculate present value\n",
    "        present_value_dividends += dividends[t] / ((1 + discount_rate) ** (t + 1))\n",
    "    \n",
    "    D_terminal = dividends[-1] * (1 + terminal_growth_rate)\n",
    "    terminal_value = D_terminal / (discount_rate - terminal_growth_rate)\n",
    "    present_value_terminal = terminal_value / ((1 + discount_rate) ** len(dividends))\n",
    "    \n",
    "    intrinsic_value = present_value_dividends + present_value_terminal\n",
    "    return intrinsic_value\n",
    "\n",
    "# Defining function for querying user input\n",
    "def get_user_input():\n",
    "    ticker = input(\"Enter the stock ticker: \")\n",
    "    num_years = int(input(\"Enter the number of years for dividend forecast: \"))\n",
    "    dividends = [] # Initializing dividends as a list to store values of dividends for every year\n",
    "    for i in range(num_years): # For loop to traverse every dividend year\n",
    "        dividend = float(input(f\"Enter the dividend for year {i+1}: \")) \n",
    "        dividends.append(dividend) # Appending all dividends into the list\n",
    "    terminal_growth_rate = float(input(\"Enter the terminal growth rate (as a decimal): \"))\n",
    "    discount_rate = float(input(\"Enter the discount rate (as a decimal): \"))\n",
    "    current_market_price = float(input(\"Enter the current market price: \"))\n",
    "    return ticker, dividends, terminal_growth_rate, discount_rate, current_market_price\n",
    "\n",
    "# Main function\n",
    "def main():\n",
    "    ticker, dividends, terminal_growth_rate, discount_rate, current_market_price = get_user_input()\n",
    "    intrinsic_value = calculate_intrinsic_value(dividends, terminal_growth_rate, discount_rate)\n",
    "    print(f\"The intrinsic value of {ticker} is: ${intrinsic_value:.2f}\")\n",
    "    \n",
    "    if intrinsic_value > current_market_price:\n",
    "        print(\"Recommendation: Buy\")\n",
    "    elif intrinsic_value < current_market_price:\n",
    "        print(\"Recommendation: Sell\")\n",
    "    else:\n",
    "        print(\"Recommendation: Hold\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "af3663dc-1f0b-49bf-9b91-423140fa7cfb",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
