{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Project 1: Question 8\n",
    "\n",
    "Saaket Joshi, Kush Patel, Destin Blanchard, Cole Brown\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 430,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "from scipy.optimize import minimize\n",
    "from openpyxl import Workbook"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# User input function"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "User will be prompted in the next section."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 431,
   "metadata": {},
   "outputs": [],
   "source": [
    "def query_user_input():\n",
    "    # Query the user for securities\n",
    "    securities = input(\"Enter the securities in your portfolio (comma-separated, e.g., XLB,XLC,...): \").split(',')\n",
    "    securities = [s.strip() for s in securities]  # Remove leading/trailing spaces\n",
    "\n",
    "    # Query the user for original weights\n",
    "    weights = input(\"Enter the weights for each security (comma-separated, e.g., 0.14,0.11,...): \").split(',')\n",
    "    weights = [float(w.strip()) for w in weights]\n",
    "\n",
    "    # Check if weights sum to 1\n",
    "    if round(np.sum(weights), 5) != 1.0:\n",
    "        print(\"Error: The weights do not sum to 1. Please check your input.\")\n",
    "        return None, None, None, None, None\n",
    "\n",
    "    # Query the user for the risk-free rate\n",
    "    risk_free_rate = float(input(\"Enter the risk-free rate (as a decimal, e.g., 0.0025 for 0.25%): \"))\n",
    "\n",
    "    # Query the user for the upper and lower bounds for each security weight\n",
    "    lower_bounds = input(\"Enter the lower bounds for each security (comma-separated, e.g., 0.05,0.05,...): \").split(',')\n",
    "    if lower_bounds == '':\n",
    "        lower_bounds = \"None\"\n",
    "    else:\n",
    "        lower_bounds = [float(lb.strip()) for lb in lower_bounds]\n",
    "\n",
    "    upper_bounds = input(\"Enter the upper bounds for each security (comma-separated, e.g., 0.2,0.2,...): \").split(',')\n",
    "    upper_bounds = [float(ub.strip()) for ub in upper_bounds]\n",
    "\n",
    "    # Validate that securities, weights, and bounds have the same length\n",
    "    if len(securities) != len(weights) or len(securities) != len(lower_bounds) or len(securities) != len(upper_bounds):\n",
    "        print(\"Error: Mismatched input lengths. Please ensure that the number of securities, weights, and bounds are the same.\")\n",
    "        return None, None, None, None, None\n",
    "\n",
    "    # Return the user inputs\n",
    "    return securities, weights, risk_free_rate, lower_bounds, upper_bounds\n",
    "\n",
    "def display_portfolio_info(securities, weights, risk_free_rate, lower_bounds, upper_bounds):\n",
    "    # Create a DataFrame to display the portfolio information\n",
    "    portfolio_info = pd.DataFrame({\n",
    "        'Security': securities,\n",
    "        'Weight': weights,\n",
    "        'Lower Bound': lower_bounds,\n",
    "        'Upper Bound': upper_bounds\n",
    "    })\n",
    "    \n",
    "    # Display the portfolio information and risk-free rate\n",
    "    print(\"\\n--- Portfolio Information ---\")\n",
    "    print(portfolio_info)\n",
    "    print(f\"\\nRisk-Free Rate: {risk_free_rate * 100}%\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 411,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ORIGINAL PORTFOLIO\n",
    "\n",
    "# orig_securities = np.array(['XLB', 'XLC', 'XLE', 'XLF',\n",
    "#                     'XLI', 'XLK', 'XLP', 'XLRE',\n",
    "#                     'XLU', 'XLV', 'XLY'])\n",
    "# orig_weights = np.array([0.14, 0.11, 0.05, 0.14, 0.09, 0.12,\n",
    "#                 0.05, 0.15, 0.03, 0.04, 0.08])\n",
    "# orig_rf = 0.0025 # i made this up\n",
    "# orig_lb = np.array([0,0,0,0,0,0,0,0,0,0,0])\n",
    "# orig_ub = np.array([1,1,1,1,1,1,1,1,1,1,1])\n",
    "\n",
    "# display_portfolio_info(orig_securities,orig_weights,orig_rf,orig_lb,orig_ub)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# User Begin Here"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## User Input"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "use these inputs for client portfolio\n",
    "\n",
    "XLB,XLC,XLE,XLF,XLI,XLK,XLP,XLRE,XLU,XLV,XLY\n",
    "\n",
    "0.14,0.11,0.05,0.14,0.09,0.12,0.05,0.15,0.03,0.04,0.08\n",
    "\n",
    "0.0025\n",
    "\n",
    "-0.2,-0.2,-0.2,-0.2,-0.2,-0.2,-0.2,-0.2,-0.2,-0.2,-0.2\n",
    "\n",
    "0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35,0.35"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 432,
   "metadata": {},
   "outputs": [],
   "source": [
    "securities, weights, risk_free_rate, lower_bounds, upper_bounds = query_user_input()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 433,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Portfolio Information ---\n",
      "   Security  Weight  Lower Bound  Upper Bound\n",
      "0       XLB    0.14         -0.2         0.35\n",
      "1       XLC    0.11         -0.2         0.35\n",
      "2       XLE    0.05         -0.2         0.35\n",
      "3       XLF    0.14         -0.2         0.35\n",
      "4       XLI    0.09         -0.2         0.35\n",
      "5       XLK    0.12         -0.2         0.35\n",
      "6       XLP    0.05         -0.2         0.35\n",
      "7      XLRE    0.15         -0.2         0.35\n",
      "8       XLU    0.03         -0.2         0.35\n",
      "9       XLV    0.04         -0.2         0.35\n",
      "10      XLY    0.08         -0.2         0.35\n",
      "\n",
      "Risk-Free Rate: 0.25%\n"
     ]
    }
   ],
   "source": [
    "display_portfolio_info(securities, weights, risk_free_rate, lower_bounds, upper_bounds)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Returns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 434,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  11 of 11 completed"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average Monthly Returns:\n",
      "Ticker\n",
      "XLB     0.010106\n",
      "XLC     0.010933\n",
      "XLE     0.010936\n",
      "XLF     0.010344\n",
      "XLI     0.011084\n",
      "XLK     0.018648\n",
      "XLP     0.008965\n",
      "XLRE    0.008543\n",
      "XLU     0.009617\n",
      "XLV     0.009809\n",
      "XLY     0.011060\n",
      "dtype: float64\n",
      "\n",
      "Standard Deviations:\n",
      "Ticker\n",
      "XLB     0.062516\n",
      "XLC     0.059031\n",
      "XLE     0.103529\n",
      "XLF     0.065173\n",
      "XLI     0.062807\n",
      "XLK     0.063998\n",
      "XLP     0.040713\n",
      "XLRE    0.058336\n",
      "XLU     0.049761\n",
      "XLV     0.044362\n",
      "XLY     0.068343\n",
      "dtype: float64\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "sector_etfs = securities\n",
    "orig_weights = np.array(weights)\n",
    "# Download 10 years (120 months) of data from Yahoo Finance\n",
    "etf_data = yf.download(sector_etfs, start='2018-06-18', end='2024-10-01', interval='1mo')['Adj Close']\n",
    "\n",
    "# Calculate monthly returns for each ETF\n",
    "monthly_returns = etf_data.pct_change().dropna()\n",
    "\n",
    "# Calculate the average monthly return and standard deviation for each ETF\n",
    "average_returns = monthly_returns.mean()\n",
    "std_devs = monthly_returns.std()\n",
    "\n",
    "# Display the results\n",
    "print(\"Average Monthly Returns:\")\n",
    "print(average_returns)\n",
    "print(\"\\nStandard Deviations:\")\n",
    "print(std_devs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 408,
   "metadata": {},
   "outputs": [],
   "source": [
    "# default for client example\n",
    "\n",
    "# # List of sector ETFs from Exhibit I\n",
    "# sector_etfs = ['XLB', 'XLC', 'XLE', 'XLF', 'XLI', 'XLK', 'XLP', 'XLRE', 'XLU', 'XLV', 'XLY']\n",
    "\n",
    "# # Download 10 years (120 months) of data from Yahoo Finance\n",
    "# etf_data = yf.download(sector_etfs, start='2018-06-18', end='2024-10-01', interval='1mo')['Adj Close']\n",
    "\n",
    "# # Calculate monthly returns for each ETF\n",
    "# monthly_returns = etf_data.pct_change().dropna()\n",
    "\n",
    "# risk_free_rate = .0025\n",
    "\n",
    "# # Calculate the average monthly return and standard deviation for each ETF\n",
    "# average_returns = monthly_returns.mean()\n",
    "# std_devs = monthly_returns.std()\n",
    "\n",
    "# # Display the results\n",
    "# print(\"Average Monthly Returns:\")\n",
    "# print(average_returns)\n",
    "# print(\"\\nStandard Deviations:\")\n",
    "# print(std_devs)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 409,
   "metadata": {},
   "outputs": [],
   "source": [
    "# monthly_returns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Computations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 435,
   "metadata": {},
   "outputs": [],
   "source": [
    "cov_matrix = monthly_returns.cov()\n",
    "n_assets = cov_matrix.shape[0]\n",
    "ones = np.ones(n_assets)\n",
    "# cov_matrix\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### GMV using Ax = b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 436,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-0.29689067,  0.21359133, -0.02646103,  0.1622356 , -0.35487225,\n",
       "       -0.17266528,  0.75769444, -0.30559887,  0.23810509,  0.48122156,\n",
       "        0.30364009])"
      ]
     },
     "execution_count": 436,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Construct the augmented matrix A (2 * covariance matrix)\n",
    "A = np.block([\n",
    "    [2 * cov_matrix, ones.reshape(-1, 1)],\n",
    "    [ones.reshape(1, -1), 0]\n",
    "])\n",
    "\n",
    "# b array\n",
    "b = np.append(np.zeros(n_assets), 1)\n",
    "\n",
    "inv_a = np.linalg.inv(A)\n",
    "\n",
    "w_GMV_mat = np.dot(inv_a, b)\n",
    "lambda_gmv = w_GMV_mat[11]\n",
    "w_GMV_mat = w_GMV_mat[0:11]\n",
    "w_GMV_mat\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 437,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      GMV Weights\n",
      "XLB     -0.296891\n",
      "XLC      0.213591\n",
      "XLE     -0.026461\n",
      "XLF      0.162236\n",
      "XLI     -0.354872\n",
      "XLK     -0.172665\n",
      "XLP      0.757694\n",
      "XLRE    -0.305599\n",
      "XLU      0.238105\n",
      "XLV      0.481222\n",
      "XLY      0.303640\n",
      "GMV expected return: 0.812%\n",
      "GMV Variance: 0.121%\n",
      "GMV Standard Deviation: 3.477%\n",
      "GMV Sharpe Ratio: 0.1616519180714384\n"
     ]
    }
   ],
   "source": [
    "w_GMV_mat_tab = pd.DataFrame({'GMV Weights': w_GMV_mat}, index=sector_etfs)\n",
    "print(w_GMV_mat_tab)\n",
    "GMV_er = np.dot(w_GMV_mat.T, average_returns)\n",
    "print(f\"GMV expected return: {GMV_er*100:.3f}%\")\n",
    "GMV_var = np.linalg.multi_dot([w_GMV_mat.T, cov_matrix, w_GMV_mat])\n",
    "print(f\"GMV Variance: {GMV_var*100:.3f}%\")\n",
    "GMV_std = np.sqrt(GMV_var)\n",
    "print(f\"GMV Standard Deviation: {GMV_std*100:.3f}%\")\n",
    "GMV_sharpe = (GMV_er - risk_free_rate) / GMV_std\n",
    "print(f\"GMV Sharpe Ratio: {GMV_sharpe}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### GMV using matrix-analytics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "${w}_{\\text{GMV}} = \\frac{\\mathbf{\\Sigma}^{-1} \\mathbf{1}}{\\mathbf{1}^\\top \\mathbf{\\Sigma}^{-1} \\mathbf{1}}$\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 438,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-0.29689067,  0.21359133, -0.02646103,  0.1622356 , -0.35487225,\n",
       "       -0.17266528,  0.75769444, -0.30559887,  0.23810509,  0.48122156,\n",
       "        0.30364009])"
      ]
     },
     "execution_count": 438,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "inv_cov_matrix = np.linalg.inv(cov_matrix)\n",
    "\n",
    "numerator = np.dot(inv_cov_matrix, ones)\n",
    "denominator = np.dot(ones.T, numerator)\n",
    "\n",
    "w_GMV_m_a = numerator / denominator\n",
    "w_GMV_m_a\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 439,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      GMV Weights\n",
      "XLB     -0.296891\n",
      "XLC      0.213591\n",
      "XLE     -0.026461\n",
      "XLF      0.162236\n",
      "XLI     -0.354872\n",
      "XLK     -0.172665\n",
      "XLP      0.757694\n",
      "XLRE    -0.305599\n",
      "XLU      0.238105\n",
      "XLV      0.481222\n",
      "XLY      0.303640\n",
      "GMV expected return: 0.812%\n",
      "GMV Variance: 0.121%\n",
      "GMV Standard Deviation: 3.477%\n",
      "GMV Sharpe Ratio: 0.16165191807143822\n"
     ]
    }
   ],
   "source": [
    "w_GMV_m_a_tab = pd.DataFrame({'GMV Weights': w_GMV_m_a}, index=sector_etfs)\n",
    "print(w_GMV_m_a_tab)\n",
    "GMV_er = np.dot(w_GMV_m_a.T, average_returns)\n",
    "print(f\"GMV expected return: {GMV_er*100:.3f}%\")\n",
    "GMV_var = np.linalg.multi_dot([w_GMV_m_a.T, cov_matrix, w_GMV_m_a])\n",
    "print(f\"GMV Variance: {GMV_var*100:.3f}%\")\n",
    "GMV_std = np.sqrt(GMV_var)\n",
    "print(f\"GMV Standard Deviation: {GMV_std*100:.3f}%\")\n",
    "GMV_sharpe = (GMV_er - risk_free_rate) / GMV_std\n",
    "print(f\"GMV Sharpe Ratio: {GMV_sharpe}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Efficient Portfolio"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 427,
   "metadata": {},
   "outputs": [],
   "source": [
    "# print(cov_matrix)\n",
    "# print(np.linalg.inv(cov_matrix))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 440,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.26154783],\n",
       "       [ 0.04415427],\n",
       "       [-0.01780546],\n",
       "       [ 0.21891421],\n",
       "       [-0.3854814 ],\n",
       "       [ 0.20036182],\n",
       "       [ 0.62533114],\n",
       "       [-0.32306899],\n",
       "       [ 0.3178399 ],\n",
       "       [ 0.44928774],\n",
       "       [ 0.1320146 ]])"
      ]
     },
     "execution_count": 440,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mu_star = np.dot(orig_weights.T, average_returns)\n",
    "mu_til = np.array([[mu_star], [1]])\n",
    "m_mat = np.column_stack((average_returns, ones))\n",
    "\n",
    "B_mat = np.linalg.multi_dot([m_mat.T, inv_cov_matrix, m_mat])\n",
    "inv_B_mat = np.linalg.inv(B_mat)\n",
    "\n",
    "w_EP = np.linalg.multi_dot([inv_cov_matrix, m_mat, inv_B_mat, mu_til])\n",
    "\n",
    "w_EP"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 441,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      EP Weights\n",
      "XLB    -0.261548\n",
      "XLC     0.044154\n",
      "XLE    -0.017805\n",
      "XLF     0.218914\n",
      "XLI    -0.385481\n",
      "XLK     0.200362\n",
      "XLP     0.625331\n",
      "XLRE   -0.323069\n",
      "XLU     0.317840\n",
      "XLV     0.449288\n",
      "XLY     0.132015\n",
      "EP expected return: 1.114%\n",
      "GMV Variance: 0.130%\n",
      "GMV Standard Deviation: 3.603%\n",
      "GMV Sharpe Ratio: 0.2398724108156991\n"
     ]
    }
   ],
   "source": [
    "w_EP = w_EP.flatten()\n",
    "w_EP_tab = pd.DataFrame({'EP Weights': w_EP}, index=sector_etfs)\n",
    "print(w_EP_tab)\n",
    "EP_er = np.dot(w_EP.T, average_returns)\n",
    "print(f\"EP expected return: {EP_er*100:.3f}%\")\n",
    "EP_var = np.linalg.multi_dot([w_EP.T, cov_matrix, w_EP])\n",
    "print(f\"GMV Variance: {EP_var*100:.3f}%\")\n",
    "EP_std = np.sqrt(EP_var)\n",
    "print(f\"GMV Standard Deviation: {EP_std*100:.3f}%\")\n",
    "EP_sharpe = (EP_er - risk_free_rate) / EP_std\n",
    "print(f\"GMV Sharpe Ratio: {EP_sharpe}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ORP without bounds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 442,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-0.03934942, -1.02108705,  0.03661162,  0.57524944, -0.57791941,\n",
       "        2.54556245, -0.20682951, -0.43290262,  0.81912819,  0.24852159,\n",
       "       -0.94698528])"
      ]
     },
     "execution_count": 442,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "excess_returns = average_returns - risk_free_rate * ones\n",
    "\n",
    "numerator_orp = np.dot(inv_cov_matrix, excess_returns)\n",
    "denominator_orp = np.linalg.multi_dot([ones.T, inv_cov_matrix, excess_returns])\n",
    "\n",
    "w_ORP = numerator_orp / denominator_orp\n",
    "w_ORP\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 443,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      ORP Weights\n",
      "XLB     -0.039349\n",
      "XLC     -1.021087\n",
      "XLE      0.036612\n",
      "XLF      0.575249\n",
      "XLI     -0.577919\n",
      "XLK      2.545562\n",
      "XLP     -0.206830\n",
      "XLRE    -0.432903\n",
      "XLU      0.819128\n",
      "XLV      0.248522\n",
      "XLY     -0.946985\n",
      "ORP expected return: 3.014%\n",
      "ORP Variance: 0.595%\n",
      "ORP Standard Deviation: 7.711%\n",
      "ORP Sharpe Ratio: 0.35848219689850347\n"
     ]
    }
   ],
   "source": [
    "# w_ORP = w_ORP.flatten()\n",
    "w_ORP_tab = pd.DataFrame({'ORP Weights': w_ORP}, index=sector_etfs)\n",
    "print(w_ORP_tab)\n",
    "ORP_er = np.dot(w_ORP.T, average_returns)\n",
    "print(f\"ORP expected return: {ORP_er*100:.3f}%\")\n",
    "ORP_var = np.linalg.multi_dot([w_ORP.T, cov_matrix, w_ORP])\n",
    "print(f\"ORP Variance: {ORP_var*100:.3f}%\")\n",
    "ORP_std = np.sqrt(ORP_var)\n",
    "print(f\"ORP Standard Deviation: {ORP_std*100:.3f}%\")\n",
    "ORP_sharpe = (ORP_er - risk_free_rate) / ORP_std\n",
    "print(f\"ORP Sharpe Ratio: {ORP_sharpe}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ORP with bounds (user case)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 444,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimized Weights: [-0.2         0.08974782 -0.00205693  0.09673394 -0.15456181  0.35\n",
      "  0.35       -0.2         0.35        0.35       -0.02986302]\n"
     ]
    }
   ],
   "source": [
    "def objective(weights):\n",
    "    portfolio_return = np.dot(weights.T, average_returns) - risk_free_rate\n",
    "    portfolio_stdev = np.sqrt(np.dot(weights.T, np.dot(cov_matrix, weights)))\n",
    "    sharpe_ratio = portfolio_return / portfolio_stdev\n",
    "    # Include a negative to turn minimize into maximize\n",
    "    return -sharpe_ratio\n",
    "\n",
    "bounds = [(lower_bounds[i], upper_bounds[i]) for i in range(n_assets)]\n",
    "constraints = {'type': 'eq', 'fun': lambda x: np.sum(x) - 1}\n",
    "\n",
    "initial_guess = np.array([1/n_assets] * n_assets)\n",
    "\n",
    "result = minimize(objective, initial_guess, bounds=bounds, constraints=constraints)\n",
    "optimized_weights = result.x\n",
    "QORP_1 = np.array(optimized_weights).reshape(-1,1)\n",
    "\n",
    "if result.success:\n",
    "    print(\"Optimized Weights:\", optimized_weights)\n",
    "else:\n",
    "    print(\"Optimization failed:\", result.message)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 445,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimized Portfolio Return: 0.0127\n",
      "Optimized Portfolio Risk (Stdev): 0.0387\n",
      "Optimized Sharpe Ratio: 0.2620\n"
     ]
    }
   ],
   "source": [
    "optimized_return = np.dot(optimized_weights, average_returns)\n",
    "optimized_risk = np.sqrt(np.dot(optimized_weights.T, np.dot(cov_matrix, optimized_weights)))\n",
    "\n",
    "optimized_sharpe_ratio = (optimized_return - risk_free_rate) / optimized_risk\n",
    "\n",
    "print(f\"Optimized Portfolio Return: {optimized_return:.4f}\")\n",
    "print(f\"Optimized Portfolio Risk (Stdev): {optimized_risk:.4f}\")\n",
    "print(f\"Optimized Sharpe Ratio: {optimized_sharpe_ratio:.4f}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ORP with bounds (client example -> ignore for user)\n",
    "This code is commented out for 'Run All' purposes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Scenario 1\n",
    "\n",
    "Upper bound: 15%\n",
    "\n",
    "Lower Bound: 0%"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 447,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimized Weights: [5.19116015e-17 1.50000000e-01 9.30917507e-17 4.19897924e-02\n",
      " 1.50000000e-01 1.50000000e-01 1.50000000e-01 8.09363876e-17\n",
      " 1.50000000e-01 1.50000000e-01 5.80102076e-02]\n"
     ]
    }
   ],
   "source": [
    "# def objective(weights):\n",
    "#     portfolio_return = np.dot(weights.T, average_returns) - risk_free_rate\n",
    "#     portfolio_stdev = np.sqrt(np.dot(weights.T, np.dot(cov_matrix, weights)))\n",
    "#     sharpe_ratio = portfolio_return / portfolio_stdev\n",
    "#     # Include a negative to turn minimize into maximize\n",
    "#     return -sharpe_ratio\n",
    "\n",
    "\n",
    "# upperbound = float(input(\"Enter upper bound constraint: \"))\n",
    "# lowerbound = float(input(\"Enter lower bound constraint: \"))\n",
    "# bounds = [(lowerbound, upperbound) for _ in range(n_assets)]\n",
    "# constraints = {'type': 'eq', 'fun': lambda x: np.sum(x) - 1}\n",
    "\n",
    "# initial_guess = np.array([1/n_assets] * n_assets)\n",
    "\n",
    "# result = minimize(objective, initial_guess, bounds=bounds, constraints=constraints)\n",
    "# optimized_weights_1 = result.x\n",
    "# QORP_1 = np.array(optimized_weights_1).reshape(-1,1)\n",
    "\n",
    "# if result.success:\n",
    "#     print(\"Optimized Weights:\", optimized_weights_1)\n",
    "# else:\n",
    "#     print(\"Optimization failed:\", result.message)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 448,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimized Portfolio Return: 0.0114\n",
      "Optimized Portfolio Risk (Stdev): 0.0465\n",
      "Optimized Sharpe Ratio: 0.1919\n"
     ]
    }
   ],
   "source": [
    "# optimized_return_1 = np.dot(optimized_weights_1, average_returns)\n",
    "# optimized_risk_1 = np.sqrt(np.dot(optimized_weights_1.T, np.dot(cov_matrix, optimized_weights_1)))\n",
    "\n",
    "# optimized_sharpe_ratio_1 = (optimized_return_1 - risk_free_rate) / optimized_risk_1\n",
    "\n",
    "# print(f\"Optimized Portfolio Return: {optimized_return_1:.4f}\")\n",
    "# print(f\"Optimized Portfolio Risk (Stdev): {optimized_risk_1:.4f}\")\n",
    "# print(f\"Optimized Sharpe Ratio: {optimized_sharpe_ratio_1:.4f}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Scenario 2\n",
    "\n",
    "Upper bound: 35%\n",
    "\n",
    "Lower Bound: -20%"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 449,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimized Weights: [-0.2         0.08974782 -0.00205693  0.09673394 -0.15456181  0.35\n",
      "  0.35       -0.2         0.35        0.35       -0.02986302]\n"
     ]
    }
   ],
   "source": [
    "# def objective(weights):\n",
    "#     portfolio_return = np.dot(weights.T, average_returns) - risk_free_rate\n",
    "#     portfolio_stdev = np.sqrt(np.dot(weights.T, np.dot(cov_matrix, weights)))\n",
    "#     sharpe_ratio = portfolio_return / portfolio_stdev\n",
    "#     # Include a negative to turn minimize into maximize\n",
    "#     return -sharpe_ratio\n",
    "\n",
    "\n",
    "# upperbound = float(input(\"Enter upper bound constraint: \"))\n",
    "# lowerbound = float(input(\"Enter lower bound constraint: \"))\n",
    "# bounds = [(lowerbound, upperbound) for _ in range(n_assets)]\n",
    "# constraints = {'type': 'eq', 'fun': lambda x: np.sum(x) - 1}\n",
    "\n",
    "# initial_guess = np.array([1/n_assets] * n_assets)\n",
    "\n",
    "# result = minimize(objective, initial_guess, bounds=bounds, constraints=constraints)\n",
    "# optimized_weights_2 = result.x\n",
    "# QORP_2 = np.array(optimized_weights_2).reshape(-1,1)\n",
    "\n",
    "# if result.success:\n",
    "#     print(\"Optimized Weights:\", optimized_weights_2)\n",
    "# else:\n",
    "#     print(\"Optimization failed:\", result.message)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 450,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimized Portfolio Return: 0.0127\n",
      "Optimized Portfolio Risk (Stdev): 0.0387\n",
      "Optimized Sharpe Ratio: 0.2620\n"
     ]
    }
   ],
   "source": [
    "# optimized_return_2 = np.dot(optimized_weights_2, average_returns)\n",
    "# optimized_risk_2 = np.sqrt(np.dot(optimized_weights_2.T, np.dot(cov_matrix, optimized_weights_2)))\n",
    "\n",
    "# optimized_sharpe_ratio_2 = (optimized_return_2 - risk_free_rate) / optimized_risk_2\n",
    "\n",
    "# print(f\"Optimized Portfolio Return: {optimized_return_2:.4f}\")\n",
    "# print(f\"Optimized Portfolio Risk (Stdev): {optimized_risk_2:.4f}\")\n",
    "# print(f\"Optimized Sharpe Ratio: {optimized_sharpe_ratio_2:.4f}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Write to excel"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### User case"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 454,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Portfolio Data sent to Q8_user.xlsx\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "portfolio_data = {\n",
    "    # 'Portfolio Name': sector_etfs,\n",
    "    'ORIGPORT': orig_weights,\n",
    "    'GMVPORT': w_GMV_mat,\n",
    "    'EFPORT': w_EP,\n",
    "    'ORP': w_ORP,\n",
    "    'Constrained ORP': optimized_weights,\n",
    "}\n",
    "\n",
    "tot_weights = []\n",
    "for key in portfolio_data:\n",
    "    if key != 'Portfolio Name':\n",
    "        tot_weights = np.append(tot_weights, portfolio_data[key].sum())\n",
    "\n",
    "orig_return = np.dot(orig_weights.T, average_returns)\n",
    "orig_std = np.sqrt(np.dot(orig_weights.T, np.dot(cov_matrix, orig_weights)))\n",
    "orig_sharpe = (orig_return - risk_free_rate) / orig_std\n",
    "\n",
    "\n",
    "returns = np.array([orig_return, GMV_er, EP_er, ORP_er, optimized_return])\n",
    "stds = np.array([orig_std, GMV_std, EP_std, ORP_std, optimized_risk])\n",
    "sharpes = np.array([orig_sharpe, GMV_sharpe, EP_sharpe, ORP_sharpe, optimized_sharpe_ratio])\n",
    "\n",
    "weights_col = tot_weights.reshape(-1,1)\n",
    "returns_col = returns.reshape(-1, 1)\n",
    "stds_col = stds.reshape(-1, 1)\n",
    "sharpes_col = sharpes.reshape(-1, 1)\n",
    "cols = np.hstack([weights_col, returns_col, stds_col, sharpes_col])\n",
    "\n",
    "additionals = ['TOTAL', 'Expected Return', 'Standard Deviation', 'Sharpe Ratio']\n",
    "indexes = sector_etfs + additionals\n",
    "\n",
    "for (key, row) in zip(portfolio_data.keys(), cols):\n",
    "    portfolio_data[key] = np.append(portfolio_data[key], row)\n",
    "\n",
    "portfolio_data\n",
    "\n",
    "\n",
    "final_df = pd.DataFrame(portfolio_data, index=indexes).T.reset_index()\n",
    "\n",
    "final_df.rename(columns={'index': 'Portfolio Name'}, inplace=True)\n",
    "\n",
    "final_df\n",
    "\n",
    "final_df.to_excel('Q8_user.xlsx', index=False)\n",
    "\n",
    "print(\"Portfolio Data sent to Q8_user.xlsx\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Client example (ignore for user)\n",
    "This code is commented out for 'Run All' purposes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 453,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Portfolio Data sent to Q8_excel_output.xlsx\n"
     ]
    }
   ],
   "source": [
    "# import numpy as np\n",
    "# import pandas as pd\n",
    "\n",
    "# portfolio_data = {\n",
    "#     # 'Portfolio Name': sector_etfs,\n",
    "#     'ORIGPORT': orig_weights,\n",
    "#     'GMVPORT': w_GMV_mat,\n",
    "#     'EFPORT': w_EP,\n",
    "#     'ORP': w_ORP,\n",
    "#     'Constrained ORP 1': optimized_weights_1,\n",
    "#     'Constrained ORP 2': optimized_weights_2\n",
    "# }\n",
    "\n",
    "# tot_weights = []\n",
    "# for key in portfolio_data:\n",
    "#     if key != 'Portfolio Name':\n",
    "#         tot_weights = np.append(tot_weights, portfolio_data[key].sum())\n",
    "\n",
    "# orig_return = np.dot(orig_weights.T, average_returns)\n",
    "# orig_std = np.sqrt(np.dot(orig_weights.T, np.dot(cov_matrix, orig_weights)))\n",
    "# orig_sharpe = (orig_return - risk_free_rate) / orig_std\n",
    "\n",
    "\n",
    "# returns = np.array([orig_return, GMV_er, EP_er, ORP_er, optimized_return_1, optimized_return_2])\n",
    "# stds = np.array([orig_std, GMV_std, EP_std, ORP_std, optimized_risk_1, optimized_risk_2])\n",
    "# sharpes = np.array([orig_sharpe, GMV_sharpe, EP_sharpe, ORP_sharpe, optimized_sharpe_ratio_1, optimized_sharpe_ratio_2])\n",
    "\n",
    "# weights_col = tot_weights.reshape(-1,1)\n",
    "# returns_col = returns.reshape(-1, 1)\n",
    "# stds_col = stds.reshape(-1, 1)\n",
    "# sharpes_col = sharpes.reshape(-1, 1)\n",
    "# cols = np.hstack([weights_col, returns_col, stds_col, sharpes_col])\n",
    "\n",
    "# additionals = ['TOTAL', 'Expected Return', 'Standard Deviation', 'Sharpe Ratio']\n",
    "# indexes = sector_etfs + additionals\n",
    "\n",
    "# for (key, row) in zip(portfolio_data.keys(), cols):\n",
    "#     portfolio_data[key] = np.append(portfolio_data[key], row)\n",
    "\n",
    "# portfolio_data\n",
    "\n",
    "\n",
    "# final_df = pd.DataFrame(portfolio_data, index=indexes).T.reset_index()\n",
    "\n",
    "# final_df.rename(columns={'index': 'Portfolio Name'}, inplace=True)\n",
    "\n",
    "# final_df\n",
    "\n",
    "# final_df.to_excel('Q8_excel_output.xlsx', index=False)\n",
    "\n",
    "# print(\"Portfolio Data sent to Q8_excel_output.xlsx\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
